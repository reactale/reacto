{"componentChunkName":"component---src-templates-doc-js","path":"/docs/calc","result":{"data":{"mdx":{"id":"14d1ea7c-d864-5850-baca-a2e451e284dd","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Calc Reacto\",\n  \"description\": \"Calc Reacto helps us calculate simple arithmatics inside reactive text\",\n  \"slug\": \"docs/calc\",\n  \"order\": 4\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Calc Reacto \", mdx(\"inlineCode\", {\n    parentName: \"h1\"\n  }, \"((r.calc.))\")), mdx(\"p\", null, \"Calc Reacto helps us calculate simple arithmatics inside reactive text.\"), mdx(\"h2\", null, \"A. The Structure and The Operators\"), mdx(\"h3\", null, \"A.1. The Structure\"), mdx(\"p\", null, \"The structure of calc-reacto is very simple, viz. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"operand operator operand\"), \". The operands can be numbers or any reacto that can be resolved to a number.\"), mdx(\"p\", null, \"So, it is,\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"((r.calc. operand operator operand))\\n\")), mdx(\"h3\", null, \"A.2. The Operators\"), mdx(\"p\", null, \"The available mathematic operators are,\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Addition \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"+\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Subtraction \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"-\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiplication \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"*\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Division \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/\"))), mdx(\"h2\", null, \"B. Usages and Exmaples\"), mdx(\"h3\", null, \"B.1. Addition \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"+\")), mdx(RTOCodeBlock, {\n    mdxType: \"RTOCodeBlock\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Direct Number Addition\\n((r.calc. 2 + 7))   // should give 9\\n\\n# One operand a reacto\\nAfter 5 years: ((r.calc. r.dt.year + 5))\\n\\n# Both operand reactos\\n((r.var.num1 = 9))\\\\\\n((r.var.num2 = 3))\\\\\\n((r.calc. r.var.num1 + r.var.num2)) // should give 12\\n\"))), mdx(\"h3\", null, \"B.2. Subtraction \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"-\")), mdx(RTOCodeBlock, {\n    mdxType: \"RTOCodeBlock\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Direct Number Subtraction\\n((r.calc. 10 - 1))   // should give 9\\n\\n# One operand a reacto\\nAfter 5 ago: ((r.calc. r.dt.year - 5))\\n\\n# Both operand reactos\\n((r.var.num1 = 9))\\\\\\n((r.var.num2 = 3))\\\\\\n((r.calc. r.var.num1 - r.var.num2)) // should give 6\\n\"))), mdx(\"h3\", null, \"B.3. Multiplication \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"*\")), mdx(RTOCodeBlock, {\n    mdxType: \"RTOCodeBlock\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Direct Number Multiplication\\n((r.calc. 2 * 7))   // Should give 14\\n\\n# One operand a reacto\\n((r.calc. r.dt.year * 10))\\n\\n# Both operand reactos\\n((r.var.num1 = 9))\\\\\\n((r.var.num2 = 3))\\\\\\n((r.calc. r.var.num1 * r.var.num2)) // should give 27\\n\"))), mdx(\"h3\", null, \"B.4. Division \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"/\")), mdx(RTOCodeBlock, {\n    mdxType: \"RTOCodeBlock\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Direct Number Division\\n((r.calc. 10 / 2))   // should give 5\\n\\n# One operand a reacto\\n((r.calc. r.dt.year / 10))\\n\\n# Both operand reactos\\n((r.var.num1 = 30))\\\\\\n((r.var.num2 = 3))\\\\\\n((r.calc. r.var.num1 / r.var.num2)) // should give 10\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Calc Reacto","description":"Calc Reacto helps us calculate simple arithmatics inside reactive text","slug":"docs/calc"}}},"pageContext":{"id":"14d1ea7c-d864-5850-baca-a2e451e284dd","docMenu":[{"title":"DateTime Reacto","slug":"docs/dt","order":1},{"title":"Variable Reacto","slug":"docs/var","order":2},{"title":"Conditional Reacto","slug":"docs/if","order":3},{"title":"Calc Reacto","slug":"docs/calc","order":4},{"title":"Config Reacto","slug":"docs/cfg","order":5},{"title":"Cheatsheet","slug":"docs/cheatsheet","order":6},{"title":"Reacto Recipes","slug":"docs/recipes","order":7}]}},"staticQueryHashes":["63159454","63159454"]}